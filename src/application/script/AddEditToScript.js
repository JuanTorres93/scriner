// TODO NEXT: Delete this use case and substitute it with AddEditToScript
import { Edit } from '../../domain/edit/Edit';
import { ValidationError } from '../../domain/common/errors';

export class AddEditToScript {
  constructor(scriptsRepo, editsRepo) {
    this._scriptsRepo = scriptsRepo;
    // TODO Refactor to use only scriptsRepo
    this._editsRepo = editsRepo;
  }

  exec = async (edit) => {
    if (!edit)
      throw new ValidationError('AddEditToScript: An edit is required');
    const script = await this._scriptsRepo.getById(edit.scriptId);

    const newEditData = { ...edit };

    if (!newEditData.id)
      newEditData.id = await this._scriptsRepo.nextId(newEditData.scriptId);
    if (!newEditData.createdAt) newEditData.createdAt = new Date();

    const addedEdit = Edit.create(newEditData);
    script.addEdit(addedEdit);

    // savedEdit will contain the script with the id generated by the database
    const savedEdit = await this._editsRepo.save(addedEdit);

    return savedEdit || addedEdit;
  };
}
